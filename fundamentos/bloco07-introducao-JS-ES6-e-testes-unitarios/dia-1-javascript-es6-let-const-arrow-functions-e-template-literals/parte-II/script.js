// Crie uma fun√ß√£o que receba um n√∫mero e retorne seu fatorial.
// Na matem√°tica, o fatorial de um n√∫mero inteiro e positivo N, representado por N!, √© o produto de todos os seus antecessores at√© o n√∫mero um. Exemplo: 4! = 4 * 3 * 2 * 1 = 24.
// Com base nessas informa√ß√µes:
// Crie a fun√ß√£o factorial que recebe um n√∫mero como par√¢metro, utilizando arrow functions (Lembre-se de armazenar a fun√ß√£o utilizando o tipo de vari√°vel correta).
// Dentro da fun√ß√£o crie uma vari√°vel result.
// Crie a l√≥gica para retornar o fatorial de N!.
// Imprima no terminal "Esse √© o fatorial resultado da fun√ß√£o" (Lembre-se de utilizar template literals nesse momento).
// Dica: Armazene a chamada da fun√ß√£o em uma var√≠avel para imprimir no terminal seu resultado.
// B√¥nus: tente fazer o mesmo exerc√≠cio de forma recursiva. Spoiler: √â poss√≠vel resolver com uma linha usando ternary operator.






// Crie uma fun√ß√£o que receba uma frase como par√¢metro e retorne a maior palavra da frase.
// Exemplo:
// Copiar
//       longestWord('Ant√¥nio foi no banheiro e n√£o sabemos o que aconteceu') // retorna 'aconteceu'
// Dica: Nesse exerc√≠cio ser√° necess√°rio utilizar os conhecimentos sobre array, m√©todo split e loop for/of.
// B√¥nus (opcional): tente fazer o mesmo exerc√≠cio utilizando o m√©todo array.sort().





// üöÄ Crie uma p√°gina HTML que possua um contador de cliques.
// Al√©m da estrutura b√°sica do HTML, sua p√°gina deve possuir:
// Uma tag que receber√° o valor atualizado da quantidade de clicks do bot√£o.
// Um bot√£o com o texto click aqui!, que receber√° um event listener do tipo click;
// Na estrutura do script (dentro do HTML ou em um arquivo de JavaScript ):
// Crie uma vari√°vel clickCount que ir√° acumular o n√∫mero de clicks do bot√£o;
// Crie a l√≥gica do evento, para que a cada click no bot√£o seja adicionado o valor de 1. Exemplo: Caso n√£o tenha sido realizado nenhum click, o valor renderizado ser√° de 0. Caso o bot√£o seja clicado 5 vezes o valor renderizado no HTML ser√° de 5.
// Dica: Nesse exerc√≠cio utilize document. getElementById para retornar o elemento do DOM que deseja.







// üöÄ Crie duas fun√ß√µes JavaScript com as seguintes especifica√ß√µes:
// N√£o se esque√ßa de usar template literals
// Fun√ß√£o 1: Escreva uma fun√ß√£o que substitua a letra 'x' em uma frase.
// O nome da fun√ß√£o dever√° ser substituaX;
// A fun√ß√£o dever√° receber um nome por par√¢metro;
// Declare dentro da fun√ß√£o uma vari√°vel do tipo const, com o nome frase, atribuindo o valor 'Tryber x aqui!';
// A fun√ß√£o dever√° retornar uma nova frase onde o x da frase 'Tryber x aqui!' seja substitu√≠do pelo nome passado por par√¢metro.
// Exemplo:
// Par√¢metro: 'Bebeto'
// Retorno: 'Tryber Bebeto aqui!'
// Spoiler: O m√©todo split() pode ser utilizado de diferentes maneiras, como separar as palavras de um texto.
// Fun√ß√£o 2: Escreva uma fun√ß√£o que ir√° receber o retorno da Fun√ß√£o 1 por par√¢metro e retornar√° uma nova string.
// O nome da fun√ß√£o dever√° ser minhasSkills;
// A fun√ß√£o dever√° receber o retorno da Fun√ß√£o 1 - substituaX por par√¢metro;
// Declare dentro da fun√ß√£o uma vari√°vel com o nome skills, do tipo const;
// A vari√°vel skills dever√° ser um array contendo tr√™s strings com tecnologias que voc√™ j√° aprendeu.
// Crie uma var√°vel do tipo let e concatene o valor retornado da Fun√ß√£o 1 - substituaX (utilize template literals), a frase 'Minhas tr√™s principais habilidades s√£o:' e o valor da vari√°vel skills.
// Exemplo de retorno:
// Tryber Bebeto aqui!
// Minhas tr√™s principais habilidades s√£o:
// JavaScript
// HTML
// CSS
