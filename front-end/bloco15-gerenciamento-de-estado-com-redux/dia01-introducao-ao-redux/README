O Redux é uma biblioteca de gerenciamento de estado global que pode ser utilizada com algum framework front-end ou com JavaScript puro.

Com o Redux você consegue ter um estado global para a sua aplicação. E, uma vez definido esse estado, você conseguirá ler e escrever as informações a partir de qualquer lugar (ou qualquer componente, no caso de usar Redux com React).

As tarefas de leitura e escrita no estado global são feitas de forma bem estruturada, isso é, o Redux define uma “receita” que deverá ser seguida. Por essa razão, o Redux é considerado uma biblioteca “opinativa” (tradução de opinionated, que significa que a biblioteca possui regras bem definidas de como trabalhar).

Você será capaz de:
Criar uma store para armazenar o estado de uma aplicação;

Utilizar Reducers, Actions, e a função dispatch() para atualizar a store;

Utilizar a função getState() para ler dados da store.

Por que isso é importante?
Imagine que você precisa passar informações entre diferentes componentes em React. Imagine também que estas informações descem vários níveis na hierarquia de componentes. Você concorda que quando o estado é guardado por um componente, essa manipulação vai ficando cada vez mais difícil?

Suponha que você tem um componente X que possui um dado que precisa ser repassado para um componente Y, que está 10 níveis abaixo da hierarquia de componentes. Você precisa passar esse dado todos os componentes no meio, mesmo quando nenhum deles utiliza esse dado. Esse problema se chama prop drilling, e você aprenderá a resolvê-lo através do Redux! 🚀

Quando você, enquanto pessoa que desenvolve software, passa a adotar uma abordagem como a do Redux, significa que está levando a um outro nível a organização do seu código, preocupando-se em como transitar as informações entre os componentes e deixando seu código mais organizado e com maior confiabilidade.



Store - Estado global, onde o estado da aplicação fica registrado e protegido.
É um objeto que traz as funções 
*getState() para ler o estado
*dispatch() para escrever o estado
Para  criar um store da aplicação deve usar a função createStore, passando como argumento o reducer.

Reducer - responsavel por escrever o estado global e deve receber um state e uma action como parametro para retornar um novo estado ou estado anterior.

Actions - é um objeto que recebe uma chave type

Dispatch - para enviar uma action para o reducer é necessário passa-la como argumento para a função.

GetState - ela retorna o estado global

Subscribe - toda vez que atualizar o estado e renderizado atualizado

Para corrigir o deprecation warning da função *createStore() - import { legacy_createStore as createStore } from 'redux';

